// Code generated by go-bindata.
// sources:
// migrations/0001-CreateGamesTable.sql
// migrations/0002-CreateOfferTemplatesTable.sql
// migrations/0003-CreateOffersTable.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations0001CreategamestableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8d\x41\x4b\xc3\x30\x18\x86\xef\xf9\x15\x2f\xbb\xac\x05\xbd\x08\xbb\x6c\xa7\x4e\xbf\x41\x35\x26\xd2\xa4\xb8\x9d\xc6\xe7\x12\xb4\x60\x66\x69\x12\x2f\xe2\x7f\x17\x57\x11\xaa\x3b\x3f\xcf\xf3\xbe\xd7\x0d\x55\x96\x40\x5b\x4b\xca\xd4\x5a\xa1\xde\x40\x69\x0b\xda\xd6\xc6\x1a\xcc\x72\xee\xdc\xe5\x5b\x8c\xfd\x6c\x25\xc4\x8f\x6c\xab\xb5\x24\x3c\x73\xf0\x11\x85\x00\x80\xce\xe1\x9d\x87\xc3\x0b\x0f\xc5\xd5\x62\x51\xe2\xa1\xa9\xef\xab\x66\x87\x3b\xda\x5d\x9c\x84\x23\x07\x3f\x55\xbe\x4f\x54\x2b\xe5\xc8\x83\x4f\xec\x38\x31\x6e\x8d\x56\xeb\x5f\x88\x1b\xda\x54\xad\xb4\x98\x7f\x7c\xce\x97\xcb\x13\x1c\x83\xa7\x7c\x74\xaf\x7e\xff\xf7\x78\xba\x7a\x18\x3c\x27\xef\xf6\x9c\x90\xba\xe0\x63\xe2\xd0\xff\xdf\x56\xfa\xb1\x28\xc7\x20\xf7\xee\x4c\xd0\x4a\x29\xca\x95\xf8\x0a\x00\x00\xff\xff\x4f\x78\x61\xe4\x2b\x01\x00\x00")

func migrations0001CreategamestableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0001CreategamestableSql,
		"migrations/0001-CreateGamesTable.sql",
	)
}

func migrations0001CreategamestableSql() (*asset, error) {
	bytes, err := migrations0001CreategamestableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0001-CreateGamesTable.sql", size: 299, mode: os.FileMode(420), modTime: time.Unix(1487285165, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations0002CreateoffertemplatestableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\xd0\x4f\x4b\xc3\x40\x10\x05\xf0\x7b\x3e\xc5\xd0\x4b\x13\xd0\x8b\xd0\x4b\x7b\x4a\xeb\x14\xa2\x71\x23\x49\x8a\xed\xa9\x4c\xb3\xd3\x1a\xe8\x66\xe3\xee\x44\x10\xf1\xbb\x4b\x82\xe0\x9f\x22\xe4\xfc\x7e\x6f\x06\xde\x2a\xc7\xb8\x44\xc0\x6d\x89\xaa\x48\x32\x05\xc9\x1a\x54\x56\x02\x6e\x93\xa2\x2c\x60\xd2\x75\xb5\xbe\xb6\xde\xb7\x93\x45\x10\x7c\xe1\x32\x5e\xa6\x08\xf6\x78\x64\xb7\x17\x36\xed\x99\x84\x3d\x84\x01\x40\xad\xe1\x95\x5c\xf5\x4c\x2e\xbc\x99\xcd\x22\x78\xcc\x93\x87\x38\xdf\xc1\x3d\xee\xae\x02\x80\x86\x0c\xff\x06\xfd\x2b\xb5\x49\xd3\x3e\x6d\x9d\xd5\x5d\x25\xfb\xbf\x47\x7e\x9a\x13\x19\xfe\x17\x40\x8e\x6b\xcc\x51\xad\xb0\x18\xa0\x0f\x6b\x1d\xf5\xad\xca\x36\xc2\x8d\x78\xb8\x2b\x32\xb5\xfc\xf6\xb7\xb8\x8e\x37\x69\x09\xd3\xf7\x8f\x29\xcc\xe7\x43\xda\x7b\xc3\x42\x9a\x84\xc6\xfa\x96\x5d\x6d\xf5\x58\x7d\x74\xfc\xd2\x71\x53\xbd\x8d\x2d\x88\xab\x4f\x27\x76\x63\x39\x37\x74\x38\xb3\x86\x83\xb5\xe7\x4b\x2d\xae\xe3\x61\x13\xc7\x24\xac\xf7\x24\x20\xb5\x61\x2f\x64\xda\x4b\xad\xb2\xa7\x30\x0a\xa2\x45\xf0\x19\x00\x00\xff\xff\x9d\x5e\xd9\xba\x28\x02\x00\x00")

func migrations0002CreateoffertemplatestableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0002CreateoffertemplatestableSql,
		"migrations/0002-CreateOfferTemplatesTable.sql",
	)
}

func migrations0002CreateoffertemplatestableSql() (*asset, error) {
	bytes, err := migrations0002CreateoffertemplatestableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0002-CreateOfferTemplatesTable.sql", size: 552, mode: os.FileMode(420), modTime: time.Unix(1487601328, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations0003CreateofferstableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x8f\xc1\x4b\xc3\x30\x14\x87\xef\xfd\x2b\x1e\x3b\xb5\xa0\x50\xc5\x9d\x76\xaa\xf3\x15\x8a\x35\x95\x34\xc3\xed\x14\xc2\xf2\x36\x03\x8d\x0b\x49\x3a\xf0\xbf\x97\xc5\x8d\x4e\xd8\xc1\xf3\xfb\xbe\xef\xc7\x5b\x72\xac\x04\x02\xae\x05\xb2\xbe\xe9\x18\x34\x35\xb0\x4e\x00\xae\x9b\x5e\xf4\x30\x1b\x47\xa3\xef\x0f\x21\xb8\xd9\x22\xcb\xce\xb0\xa8\x9e\x5b\x84\xc3\x6e\x47\x3e\x40\x9e\x01\x00\x18\x0d\x27\x12\xde\x79\xf3\x56\xf1\x0d\xbc\xe2\x06\x5e\xb0\xae\x56\xad\x48\x07\xb9\xa7\x2f\xf2\x2a\x92\x3c\x3e\xe5\xc5\x5d\x72\xf6\xca\x92\x34\x1a\x8e\xca\x6f\x3f\x95\xcf\x1f\xe7\xf3\x22\x6d\xb3\x55\xdb\x02\xc7\x1a\x39\xb2\x25\xf6\x09\x0c\xb9\xd1\x67\x2f\x0d\xcb\x48\xd6\x0d\xa7\xe0\x7f\x0a\x7f\x95\xab\x96\x1b\xd4\x37\xf9\xeb\xc6\x43\x59\x96\x53\xe4\x97\xda\x7a\x52\x91\xb4\x54\x11\xa2\xb1\x14\xa2\xb2\x6e\xda\xb9\xfc\xc9\xba\x8f\xcb\x6b\xa3\xd3\x37\x84\xa9\x37\x28\x63\x6f\x9d\xb3\x62\x91\xfd\x04\x00\x00\xff\xff\x6e\xd9\x76\x0e\x92\x01\x00\x00")

func migrations0003CreateofferstableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0003CreateofferstableSql,
		"migrations/0003-CreateOffersTable.sql",
	)
}

func migrations0003CreateofferstableSql() (*asset, error) {
	bytes, err := migrations0003CreateofferstableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0003-CreateOffersTable.sql", size: 402, mode: os.FileMode(420), modTime: time.Unix(1487442580, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/0001-CreateGamesTable.sql": migrations0001CreategamestableSql,
	"migrations/0002-CreateOfferTemplatesTable.sql": migrations0002CreateoffertemplatestableSql,
	"migrations/0003-CreateOffersTable.sql": migrations0003CreateofferstableSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"0001-CreateGamesTable.sql": &bintree{migrations0001CreategamestableSql, map[string]*bintree{}},
		"0002-CreateOfferTemplatesTable.sql": &bintree{migrations0002CreateoffertemplatestableSql, map[string]*bintree{}},
		"0003-CreateOffersTable.sql": &bintree{migrations0003CreateofferstableSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

