// Code generated by go-bindata.
// sources:
// migrations/0001-CreateGamesTable.sql
// migrations/0002-CreateOfferTemplatesTable.sql
// migrations/0003-CreateOffersTable.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations0001CreategamestableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8d\x41\x4b\xc3\x30\x18\x86\xef\xf9\x15\x2f\xbb\xac\x05\xbd\x08\xbb\x6c\xa7\x4e\xbf\x41\x35\x26\xd2\xa4\xb8\x9d\xc6\xe7\x12\xb4\x60\x66\x69\x12\x2f\xe2\x7f\x17\x57\x11\xaa\x3b\x3f\xcf\xf3\xbe\xd7\x0d\x55\x96\x40\x5b\x4b\xca\xd4\x5a\xa1\xde\x40\x69\x0b\xda\xd6\xc6\x1a\xcc\x72\xee\xdc\xe5\x5b\x8c\xfd\x6c\x25\xc4\x8f\x6c\xab\xb5\x24\x3c\x73\xf0\x11\x85\x00\x80\xce\xe1\x9d\x87\xc3\x0b\x0f\xc5\xd5\x62\x51\xe2\xa1\xa9\xef\xab\x66\x87\x3b\xda\x5d\x9c\x84\x23\x07\x3f\x55\xbe\x4f\x54\x2b\xe5\xc8\x83\x4f\xec\x38\x31\x6e\x8d\x56\xeb\x5f\x88\x1b\xda\x54\xad\xb4\x98\x7f\x7c\xce\x97\xcb\x13\x1c\x83\xa7\x7c\x74\xaf\x7e\xff\xf7\x78\xba\x7a\x18\x3c\x27\xef\xf6\x9c\x90\xba\xe0\x63\xe2\xd0\xff\xdf\x56\xfa\xb1\x28\xc7\x20\xf7\xee\x4c\xd0\x4a\x29\xca\x95\xf8\x0a\x00\x00\xff\xff\x4f\x78\x61\xe4\x2b\x01\x00\x00")

func migrations0001CreategamestableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0001CreategamestableSql,
		"migrations/0001-CreateGamesTable.sql",
	)
}

func migrations0001CreategamestableSql() (*asset, error) {
	bytes, err := migrations0001CreategamestableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0001-CreateGamesTable.sql", size: 299, mode: os.FileMode(420), modTime: time.Unix(1487285165, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations0002CreateoffertemplatestableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\xcd\xcd\x4a\xc3\x40\x14\xc5\xf1\xfd\x3c\xc5\xa1\x9b\x36\xa0\x1b\xa5\x2e\xda\x55\xaa\xb7\x10\x8d\x13\x49\xa6\xd0\xae\xe4\x92\xb9\x89\x03\xe6\xc3\xc9\x44\x10\xf1\xdd\xa5\x41\xdc\x29\x59\xff\xfe\x87\x73\x9b\x53\x6c\x08\x74\x34\xa4\x8b\x24\xd3\x48\xf6\xd0\x99\x01\x1d\x93\xc2\x14\x58\x8c\xa3\xb3\x97\xdd\x30\xf4\x8b\xad\x52\x3f\xb1\x89\x77\x29\xa1\xab\x2a\xf1\xcf\x41\x9a\xfe\x95\x83\x0c\x58\x29\xc0\x59\x94\x2f\xec\x57\xd7\x37\x11\x9e\xf2\xe4\x31\xce\x4f\x78\xa0\xd3\x85\x02\x5a\x6e\x04\xef\xec\x27\xbf\x5a\xaf\xa3\xe9\x46\x1f\xd2\xf4\xac\xbd\xb3\x7f\x63\xcd\x8d\xfc\xe7\x65\xd7\x06\x69\xc3\x80\xfb\x22\xd3\xbb\x5f\xc2\x1d\xed\xe3\x43\x6a\xb0\xfc\xfc\x5a\x62\xb3\x99\xf4\xdc\x37\x12\xd8\x72\xe0\xb9\x7d\x2f\xde\x75\x76\x6e\x5d\x79\x79\x1b\xa5\x2d\x3f\xe6\x0e\x82\x77\x75\x2d\x7e\x4e\xae\xa2\xad\xfa\x0e\x00\x00\xff\xff\xa7\x5d\x91\xe3\xb2\x01\x00\x00")

func migrations0002CreateoffertemplatestableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0002CreateoffertemplatestableSql,
		"migrations/0002-CreateOfferTemplatesTable.sql",
	)
}

func migrations0002CreateoffertemplatestableSql() (*asset, error) {
	bytes, err := migrations0002CreateoffertemplatestableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0002-CreateOfferTemplatesTable.sql", size: 434, mode: os.FileMode(420), modTime: time.Unix(1487283788, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations0003CreateofferstableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\x41\x4b\x03\x31\x10\x85\xef\xfb\x2b\xde\x71\x17\x3c\xac\x62\x4f\x9e\xd6\x3a\x05\x71\xdd\x4a\x4c\x91\x9e\xc2\xd0\x4c\x6b\x60\xa3\x21\x9b\x2d\xf8\xef\xc5\x68\xa8\x94\x9e\xe7\x7d\xdf\x7b\xb3\x54\xd4\x69\x82\xee\xee\x7b\xc2\xe7\x7e\x2f\x71\x42\x5d\x01\x80\xb3\x98\x67\x67\xf1\xa2\x1e\x9f\x3b\xb5\xc5\x13\x6d\xf1\x40\xab\x6e\xd3\xeb\x7c\x30\x07\xf9\x90\xc8\x49\xcc\xf1\xb6\x6e\xae\x32\x73\x60\x2f\xc6\x59\x1c\x39\xee\xde\x39\xd6\x37\x8b\x45\x83\x61\xad\x31\x6c\xfa\x1e\x8a\x56\xa4\x68\x58\xd2\x6b\x0e\x4e\xb5\xb3\x7f\x5c\x2e\x36\x49\x7c\x18\x7f\x84\xa5\xba\x90\xbf\xa1\x30\xf2\x97\xc4\xff\xfa\xeb\xb6\x6d\x9b\xb3\xd4\x2e\x0a\x27\xb1\x86\x13\x92\xf3\x32\x25\xf6\xe1\x34\xa1\x3c\x30\xac\xdf\xca\xe6\x39\xd8\x0b\xc0\xc9\x37\xb2\xf3\x97\xce\x55\x73\x57\x7d\x07\x00\x00\xff\xff\x88\xd6\xed\xf2\x3e\x01\x00\x00")

func migrations0003CreateofferstableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0003CreateofferstableSql,
		"migrations/0003-CreateOffersTable.sql",
	)
}

func migrations0003CreateofferstableSql() (*asset, error) {
	bytes, err := migrations0003CreateofferstableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0003-CreateOffersTable.sql", size: 318, mode: os.FileMode(420), modTime: time.Unix(1487285165, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/0001-CreateGamesTable.sql": migrations0001CreategamestableSql,
	"migrations/0002-CreateOfferTemplatesTable.sql": migrations0002CreateoffertemplatestableSql,
	"migrations/0003-CreateOffersTable.sql": migrations0003CreateofferstableSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"0001-CreateGamesTable.sql": &bintree{migrations0001CreategamestableSql, map[string]*bintree{}},
		"0002-CreateOfferTemplatesTable.sql": &bintree{migrations0002CreateoffertemplatestableSql, map[string]*bintree{}},
		"0003-CreateOffersTable.sql": &bintree{migrations0003CreateofferstableSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

