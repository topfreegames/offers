// Code generated by go-bindata.
// sources:
// migrations/0001-CreateGamesTable.sql
// migrations/0002-CreateOfferTemplatesTable.sql
// migrations/0003-CreateOffersTable.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations0001CreategamestableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8d\x41\x4b\xc3\x30\x18\x86\xef\xf9\x15\x2f\xbb\xac\x05\xbd\x08\xbb\x6c\xa7\x4e\xbf\x41\x35\x26\xd2\xa4\xb8\x9d\xc6\xe7\x12\xb4\x60\x66\x69\x12\x2f\xe2\x7f\x17\x57\x11\xaa\x3b\x3f\xcf\xf3\xbe\xd7\x0d\x55\x96\x40\x5b\x4b\xca\xd4\x5a\xa1\xde\x40\x69\x0b\xda\xd6\xc6\x1a\xcc\x72\xee\xdc\xe5\x5b\x8c\xfd\x6c\x25\xc4\x8f\x6c\xab\xb5\x24\x3c\x73\xf0\x11\x85\x00\x80\xce\xe1\x9d\x87\xc3\x0b\x0f\xc5\xd5\x62\x51\xe2\xa1\xa9\xef\xab\x66\x87\x3b\xda\x5d\x9c\x84\x23\x07\x3f\x55\xbe\x4f\x54\x2b\xe5\xc8\x83\x4f\xec\x38\x31\x6e\x8d\x56\xeb\x5f\x88\x1b\xda\x54\xad\xb4\x98\x7f\x7c\xce\x97\xcb\x13\x1c\x83\xa7\x7c\x74\xaf\x7e\xff\xf7\x78\xba\x7a\x18\x3c\x27\xef\xf6\x9c\x90\xba\xe0\x63\xe2\xd0\xff\xdf\x56\xfa\xb1\x28\xc7\x20\xf7\xee\x4c\xd0\x4a\x29\xca\x95\xf8\x0a\x00\x00\xff\xff\x4f\x78\x61\xe4\x2b\x01\x00\x00")

func migrations0001CreategamestableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0001CreategamestableSql,
		"migrations/0001-CreateGamesTable.sql",
	)
}

func migrations0001CreategamestableSql() (*asset, error) {
	bytes, err := migrations0001CreategamestableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0001-CreateGamesTable.sql", size: 299, mode: os.FileMode(420), modTime: time.Unix(1487623679, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations0002CreateoffertemplatestableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\xd0\x4f\x6b\xf2\x40\x10\x06\xf0\x7b\x3e\xc5\xe0\xc5\x04\xde\xf7\x52\xf0\xa2\xa7\x68\x47\x48\x9b\x6e\x4a\x12\xa9\x9e\x64\xcc\x8e\x36\x90\xcd\xa6\xbb\x93\x42\x29\xfd\xee\x25\x52\xe8\x1f\x11\x72\x7e\x7e\xcf\xb3\xcb\xac\x72\x8c\x4b\x04\xdc\x96\xa8\x8a\x24\x53\x90\xac\x41\x65\x25\xe0\x36\x29\xca\x02\x26\x7d\x5f\xeb\xff\xd6\xfb\x6e\xb2\x08\x82\x2f\x5c\xc6\xcb\x14\xc1\x1e\x8f\xec\xf6\xc2\xa6\x6b\x48\xd8\x43\x18\x00\xd4\x1a\x5e\xc9\x55\xcf\xe4\xc2\x9b\xd9\x2c\x82\xc7\x3c\x79\x88\xf3\x1d\xdc\xe3\xee\x5f\x00\xd0\x92\xe1\xdf\x60\x78\x4a\x6d\xd2\x74\x48\x3b\x67\x75\x5f\xc9\xfe\xef\xc8\x4f\x73\x22\xc3\x57\x01\xe4\xb8\xc6\x1c\xd5\x0a\x8b\x33\xf4\x61\xad\xa3\xa1\x55\xd9\x56\xb8\x15\x0f\x77\x45\xa6\x96\xdf\xfe\x16\xd7\xf1\x26\x2d\x61\xfa\xfe\x31\x85\xf9\xfc\x9c\x0e\xde\xb0\x90\x26\xa1\xb1\xbe\x63\x57\x5b\x3d\x56\x1f\x1d\xbf\xf4\xdc\x56\x6f\x63\x0b\xe2\xea\xd3\x89\xdd\x58\xce\x2d\x1d\x1a\xd6\x70\xb0\xb6\xb9\xd4\xe2\x7a\x3e\xff\xb9\xa1\x8a\x0d\xb7\x72\xfd\xd8\x95\x63\x12\xd6\x7b\x12\x90\xda\xb0\x17\x32\xdd\xe5\xa0\xca\x9e\xc2\x28\x88\x16\xc1\x67\x00\x00\x00\xff\xff\x3a\x05\xb8\xcd\x4b\x02\x00\x00")

func migrations0002CreateoffertemplatestableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0002CreateoffertemplatestableSql,
		"migrations/0002-CreateOfferTemplatesTable.sql",
	)
}

func migrations0002CreateoffertemplatestableSql() (*asset, error) {
	bytes, err := migrations0002CreateoffertemplatestableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0002-CreateOfferTemplatesTable.sql", size: 587, mode: os.FileMode(420), modTime: time.Unix(1487771562, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations0003CreateofferstableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\xcb\x6a\xeb\x30\x10\x86\xf7\x7e\x8a\x21\x2b\x1b\xce\x01\xf7\x92\x6e\xba\x72\x93\x09\x98\xba\x72\xb1\x1d\x9a\xac\x84\x6a\x4d\x1c\x81\x6f\x48\x72\xa0\x6f\x5f\xa2\x5c\x9c\x92\x16\xb2\xb5\xbf\xff\xfb\x35\x33\xb3\x0c\xa3\x02\x01\x57\x05\xb2\x3c\x4e\x19\xc4\x0b\x60\x69\x01\xb8\x8a\xf3\x22\x87\xc9\x30\x28\xf9\xbf\x33\xa6\x9f\x3c\x7b\xde\x11\x2e\xa2\x97\x04\xa1\xdb\x6c\x48\x1b\xf0\x3d\x00\x00\x25\xa1\xdc\x0a\xed\x3f\x3c\x05\xf0\x9e\xc5\x6f\x51\xb6\x86\x57\x5c\xc3\x1c\x17\xd1\x32\x29\x60\xaf\xe1\x15\xb5\xa4\x85\x25\xbe\x7b\xf4\x83\x7f\x2e\x57\x89\x86\xb8\x92\xb0\x13\xda\xe5\xef\xa7\xd3\xc0\xf5\xb3\x65\x92\x40\x86\x0b\xcc\x90\xcd\x30\x77\xa0\xf1\x95\x3c\xe6\x5c\x39\xb7\xd4\xf4\xf5\x5e\x78\x8b\xe1\x67\xe4\xc2\xd5\xd7\xe2\x8b\xf4\xa5\xe3\x2e\x0c\xc3\x51\x72\xa0\x0c\x51\xcb\xcb\x6e\x68\x2d\x69\x50\xad\xa5\x8a\xf4\xd8\x73\x9a\x33\x3c\xc0\x9f\xdd\x50\x6d\xed\xcd\x78\xa9\x49\x58\x92\x5c\x58\xb0\xaa\x21\x63\x45\xd3\x5f\xc3\x2c\xfd\x38\xad\x6d\xe8\xe5\x2f\x81\xf3\x5b\xcb\x5a\xa8\xe6\xef\xdf\xb5\x30\x96\xbb\x79\xae\x00\x2f\x18\xcf\x1c\xb3\x39\xae\xc6\xed\x78\x29\x3b\xdf\xfc\xfc\x31\xf0\xbe\x03\x00\x00\xff\xff\xec\x79\x46\x76\x41\x02\x00\x00")

func migrations0003CreateofferstableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0003CreateofferstableSql,
		"migrations/0003-CreateOffersTable.sql",
	)
}

func migrations0003CreateofferstableSql() (*asset, error) {
	bytes, err := migrations0003CreateofferstableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0003-CreateOffersTable.sql", size: 577, mode: os.FileMode(420), modTime: time.Unix(1487771562, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/0001-CreateGamesTable.sql": migrations0001CreategamestableSql,
	"migrations/0002-CreateOfferTemplatesTable.sql": migrations0002CreateoffertemplatestableSql,
	"migrations/0003-CreateOffersTable.sql": migrations0003CreateofferstableSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"0001-CreateGamesTable.sql": &bintree{migrations0001CreategamestableSql, map[string]*bintree{}},
		"0002-CreateOfferTemplatesTable.sql": &bintree{migrations0002CreateoffertemplatestableSql, map[string]*bintree{}},
		"0003-CreateOffersTable.sql": &bintree{migrations0003CreateofferstableSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

