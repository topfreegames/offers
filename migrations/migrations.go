// Code generated by go-bindata.
// sources:
// migrations/0001-CreateGamesTable.sql
// migrations/0002-CreateOfferTemplatesTable.sql
// migrations/0003-CreateOffersTable.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations0001CreategamestableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x8d\xb1\x4e\xc3\x30\x14\x45\x77\x7f\xc5\x55\x97\x26\x12\x2c\x48\x5d\xda\x29\x85\x57\x61\x70\x6d\x94\xbc\xa8\x2d\x0b\x7a\xaa\x2d\xc8\x60\x88\x62\x87\x05\xf1\xef\x88\x06\x21\x21\x86\xce\xe7\x9c\x7b\xaf\x6b\xaa\x98\x40\x7b\x26\xdb\x68\x67\xa1\x37\xb0\x8e\x41\x7b\xdd\x70\x83\xd9\x38\x76\xfe\xf2\x2d\xa5\x7e\xb6\x52\xea\x47\xe6\x6a\x6d\x08\xcf\x12\x43\x42\xa1\x00\xa0\xf3\x78\x97\xe1\xf8\x22\x43\x71\xb5\x58\x94\x78\xa8\xf5\xb6\xaa\x0f\xb8\xa7\xc3\xc5\x49\x78\x95\x18\xfe\x2a\xdf\x27\xb6\x35\x66\xe2\x31\x64\xf1\x92\x05\x77\x8d\xb3\xeb\x5f\x88\x1b\xda\x54\xad\x61\xcc\x3f\x3e\xe7\xcb\xe5\x09\x4e\xc1\x71\x08\x92\x83\x7f\x92\x8c\xdc\xc5\x90\xb2\xc4\x1e\x3b\xcd\xb7\x60\xbd\x25\x3c\x3a\x4b\xff\x57\xac\xdb\x15\xe5\xd4\x8f\xbd\x3f\xdf\xb7\xc6\xa8\x72\xa5\xbe\x02\x00\x00\xff\xff\x4d\x6b\x40\xe9\x24\x01\x00\x00")

func migrations0001CreategamestableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0001CreategamestableSql,
		"migrations/0001-CreateGamesTable.sql",
	)
}

func migrations0001CreategamestableSql() (*asset, error) {
	bytes, err := migrations0001CreategamestableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0001-CreateGamesTable.sql", size: 292, mode: os.FileMode(420), modTime: time.Unix(1488915325, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations0002CreateoffertemplatestableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\xd0\xcf\x6b\xea\x40\x10\x07\xf0\x7b\xfe\x8a\xc1\x8b\x09\xbc\x77\x79\xaf\xf6\xa0\xa7\x68\x57\x9a\x36\x6e\x4a\xb2\xa2\xf6\x12\xc6\xec\x98\x86\xe6\x57\x37\x13\x41\x4a\xff\xf7\x92\x60\x91\x22\x01\xcf\xdf\xcf\x7c\x77\x76\x16\xa1\x70\x95\x00\xb1\x55\x42\x46\x5e\x20\xc1\x5b\x82\x0c\x14\x88\xad\x17\xa9\x08\x46\x6d\x9b\xe9\xbf\x55\xd3\xd4\xa3\x99\x65\x9d\xb1\x72\xe7\xbe\x80\xea\x70\x20\x13\x33\x15\x75\x8e\x4c\x0d\xd8\x16\x40\xa6\x21\x79\x43\x63\xff\xbf\x77\xe0\x25\xf4\x56\x6e\xb8\x83\x67\xb1\x83\x07\xb1\x74\xd7\xbe\x82\xae\x2d\x4e\xa9\x24\x83\x4c\xf1\xf1\xce\x76\xfe\x58\x00\xef\x74\xba\x8c\x75\x8f\xcb\xb5\xef\x77\x41\x89\x05\xc1\x11\x4d\x1f\xfe\x9b\x4c\x7e\xa7\xb5\xa9\x74\x9b\x70\x9c\xe9\x61\x93\x62\x41\x83\x00\x42\xb1\x14\xa1\x90\x0b\x11\xf5\xb0\xb1\x33\xdd\x2f\x94\x54\x25\x53\xc9\x0d\x3c\x45\x81\x9c\x5f\xfc\xcf\x37\xc6\x9f\x5f\x63\x98\x4e\xfb\xb4\xf3\x05\x31\x6a\x64\x3c\xfb\x21\x56\x93\xc9\x2a\x7d\x6b\xe9\xc1\xd0\x47\x4b\x65\x72\xba\x75\x80\x4d\x96\xa6\x64\x6e\xe5\x54\xe2\x3e\x27\x0d\xfb\xaa\xca\xaf\x35\x9b\x96\xfa\x9d\x73\x4c\xa8\xa0\x92\x87\x6f\x9c\x18\x42\x26\x1d\x23\x03\x67\x05\x35\x8c\x45\x0d\x1b\x4f\x3d\x82\xf2\x56\x02\x5e\x03\x29\xae\xfb\x65\xb0\xb1\x1d\xcb\x99\x59\xdf\x01\x00\x00\xff\xff\xa0\x12\x7f\xd9\x81\x02\x00\x00")

func migrations0002CreateoffertemplatestableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0002CreateoffertemplatestableSql,
		"migrations/0002-CreateOfferTemplatesTable.sql",
	)
}

func migrations0002CreateoffertemplatestableSql() (*asset, error) {
	bytes, err := migrations0002CreateoffertemplatestableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0002-CreateOfferTemplatesTable.sql", size: 641, mode: os.FileMode(420), modTime: time.Unix(1488915016, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations0003CreateofferstableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x4b\x8f\x9b\x40\x10\x84\xef\xfc\x8a\x96\x4f\x20\x39\x12\x79\x38\x97\x9c\x88\xdd\x56\x46\xc1\x43\x02\x83\x6c\xef\x65\x34\x0b\x6d\x8c\x96\x97\x86\xc1\x92\xff\xfd\xca\xf8\xb9\xcb\xae\xec\xfb\x57\xd5\xdd\xd5\x35\x0d\xd1\x13\x08\xb8\x12\xc8\x23\x16\x70\x60\x73\xe0\x81\x00\x5c\xb1\x48\x44\x30\xea\xba\x3c\xfd\x52\xb7\x6d\x33\xfa\x65\x59\x27\x58\x78\xbf\x7d\x84\x7a\xb3\x21\xdd\x82\x6d\x01\x00\xe4\x29\x24\x5b\xa5\xed\xef\x3f\x1d\xf8\x17\xb2\x85\x17\xae\xe1\x2f\xae\x61\x86\x73\x2f\xf6\x05\x1c\x6c\x64\x46\x15\x69\x65\x48\xee\x7e\xd8\xce\xb8\xd7\x65\xaa\x24\x99\xa7\xb0\x53\xba\xd7\x7f\x9b\x4c\x9c\x7e\x3e\x8f\x7d\x1f\x42\x9c\x63\x88\x7c\x8a\x51\x0f\xb6\x76\x9e\x9e\x74\xfd\x70\x69\xa8\x6c\x8a\x83\xe1\xed\xf8\x8f\xd4\x6f\xf1\xcf\x7d\x5e\x68\x3f\x34\x3a\x92\x4d\xa1\xf6\xa4\x6f\x77\xfd\xea\xba\xee\x7b\xaa\x25\xaa\x64\x52\x77\x95\x21\x0d\x79\x65\x28\x23\x7d\xdd\xe8\x9c\x86\x7b\x84\x9f\xeb\x2e\xdb\x9a\x87\xf1\x44\x93\x32\x94\x4a\x65\xc0\xe4\x25\xb5\x46\x95\x0d\x2c\x99\xf8\x03\x82\x2d\x10\x9e\x02\x8e\x43\x2d\x0f\x96\xe7\xac\xbb\x26\xbd\xaf\xbf\x5c\x92\x14\x2a\x2f\x1f\xa6\x0b\xd5\x1a\xd9\x1f\x7f\x8f\xb7\x9c\x6b\x91\x62\xce\xfe\xc7\x08\x8c\xcf\x70\x75\xae\x82\xbc\x04\x2d\x07\x4f\xb6\x02\x7e\xa9\xdd\x09\x1f\x5f\x1f\x33\x1e\xb6\xc2\xb1\x5e\x03\x00\x00\xff\xff\xc5\xee\x1d\xd6\xe0\x02\x00\x00")

func migrations0003CreateofferstableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0003CreateofferstableSql,
		"migrations/0003-CreateOffersTable.sql",
	)
}

func migrations0003CreateofferstableSql() (*asset, error) {
	bytes, err := migrations0003CreateofferstableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0003-CreateOffersTable.sql", size: 736, mode: os.FileMode(420), modTime: time.Unix(1488915016, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/0001-CreateGamesTable.sql": migrations0001CreategamestableSql,
	"migrations/0002-CreateOfferTemplatesTable.sql": migrations0002CreateoffertemplatestableSql,
	"migrations/0003-CreateOffersTable.sql": migrations0003CreateofferstableSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"0001-CreateGamesTable.sql": &bintree{migrations0001CreategamestableSql, map[string]*bintree{}},
		"0002-CreateOfferTemplatesTable.sql": &bintree{migrations0002CreateoffertemplatestableSql, map[string]*bintree{}},
		"0003-CreateOffersTable.sql": &bintree{migrations0003CreateofferstableSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

