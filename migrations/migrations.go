// Code generated by go-bindata.
// sources:
// migrations/0001-CreateGamesTable.sql
// migrations/0002-CreateOfferTemplatesTable.sql
// migrations/0003-CreateOffersTable.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations0001CreategamestableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x8d\xb1\x4e\xc3\x30\x14\x45\x77\x7f\xc5\x55\x97\x26\x12\x2c\x48\x5d\xda\x29\x85\x57\x61\x70\x6d\x94\x38\x6a\xcb\x52\x3d\x6a\x0b\x22\xe1\x12\x25\x36\x0b\xe2\xdf\x11\x0d\x42\x0a\x0c\x9d\xef\x39\xf7\x5c\x97\x54\x58\x02\x6d\x2d\xe9\x4a\x1a\x0d\xb9\x82\x36\x16\xb4\x95\x95\xad\x30\x49\xa9\x71\x97\x6f\x7d\xdf\x4e\x16\x42\xfc\xc0\xb6\x58\x2a\xc2\x33\x07\xdf\x23\x13\x00\xd0\x38\xbc\x73\x77\x78\xe1\x2e\xbb\x9a\xcd\x72\x3c\x94\x72\x5d\x94\x3b\xdc\xd3\xee\xe2\x04\x1c\x39\xf8\x31\xf2\x1d\xd1\xb5\x52\xc3\x1e\x7c\x64\xc7\x91\x71\x57\x19\xbd\xfc\x1d\x71\x43\xab\xa2\x56\x16\xd3\x8f\xcf\xe9\x7c\x7e\x1a\x07\xe1\x29\x1d\xdd\xab\xdf\xff\x0d\x8f\x5f\x0f\x9d\xe7\xe8\xdd\x9e\x23\x62\x13\x7c\x1f\x39\xb4\xd8\x48\x7b\x0b\x2b\xd7\x84\x47\xa3\xe9\x7f\x4a\x9b\x4d\x96\x0f\x7e\x6a\xdd\x79\xbf\x56\x4a\xe4\x0b\xf1\x15\x00\x00\xff\xff\x2e\xa6\x18\x71\x49\x01\x00\x00")

func migrations0001CreategamestableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0001CreategamestableSql,
		"migrations/0001-CreateGamesTable.sql",
	)
}

func migrations0001CreategamestableSql() (*asset, error) {
	bytes, err := migrations0001CreategamestableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0001-CreateGamesTable.sql", size: 329, mode: os.FileMode(420), modTime: time.Unix(1487785213, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations0002CreateoffertemplatestableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\xd0\x41\x4f\x83\x40\x10\x05\xe0\x3b\xbf\x62\xd2\x4b\x21\xd1\x8b\x5a\x0f\xed\x89\xd6\x6d\x44\xe9\x62\x60\x9b\xb6\x5e\xc8\x94\x9d\x22\x09\xb0\xb8\x0c\x4d\x8c\xf1\xbf\x9b\x92\x1a\x0f\x0d\x49\xcf\xf3\xbd\xb7\x2f\xbb\x88\x85\xaf\x04\x88\xad\x12\x32\x09\x22\x09\xc1\x12\x64\xa4\x40\x6c\x83\x44\x25\x30\xea\xba\x42\xdf\x9a\xb6\x6d\x46\x33\xc7\x39\x63\xe5\xcf\x43\x01\xe6\x70\x20\x9b\x32\x55\x4d\x89\x4c\x2d\xb8\x0e\x40\xa1\x21\xfb\x40\xeb\xde\x3f\x7a\xf0\x16\x07\x2b\x3f\xde\xc1\xab\xd8\xc1\x93\x58\xfa\xeb\x50\xc1\xa9\x2d\xcd\xa9\x26\x8b\x4c\xe9\xf1\xc1\xf5\x6e\x1c\x80\x1a\x2b\x82\x23\xda\x3e\x7a\x37\x99\x78\xfd\x02\xb9\x0e\xc3\xd3\xb5\xb1\x46\x77\x19\xa7\x85\x1e\x36\x39\x56\x34\x08\x20\x16\x4b\x11\x0b\xb9\x10\x49\x0f\x5b\xb7\xd0\xfd\xbb\x99\xa9\x99\x6a\x6e\xe1\x25\x89\xe4\xfc\xdf\xff\xad\x1d\x7f\xff\x8c\x61\x3a\xed\xaf\x27\x5f\x11\xa3\x46\xc6\xb3\x1f\x62\x0d\xd9\xc2\xe8\x6b\x4b\x0f\x96\x3e\x3b\xaa\xb3\xaf\x6b\x03\x6c\x8b\x3c\x27\x7b\x2d\xa7\x1a\xf7\x25\x69\xd8\x1b\x53\x5e\x6a\xb6\x1d\xf5\x9b\x4b\xcc\xa8\xa2\x9a\x87\xff\x38\xb3\x84\x4c\x3a\x45\x06\x2e\x2a\x6a\x19\xab\x06\x36\x81\x7a\x06\x15\xac\x04\xbc\x47\x52\x5c\xf6\xcb\x68\xe3\x7a\x8e\x37\x73\x7e\x03\x00\x00\xff\xff\x48\x4a\x55\x0a\x68\x02\x00\x00")

func migrations0002CreateoffertemplatestableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0002CreateoffertemplatestableSql,
		"migrations/0002-CreateOfferTemplatesTable.sql",
	)
}

func migrations0002CreateoffertemplatestableSql() (*asset, error) {
	bytes, err := migrations0002CreateoffertemplatestableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0002-CreateOfferTemplatesTable.sql", size: 616, mode: os.FileMode(420), modTime: time.Unix(1487795381, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations0003CreateofferstableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\xcb\x6a\xeb\x30\x10\x86\xf7\x7e\x8a\x21\x2b\x1b\xce\x01\xf7\x92\x6e\xba\x72\x93\x09\x35\x75\xe4\x62\x2b\x24\xe9\x46\xa8\xf6\xc4\x11\xf8\x86\x24\x07\xfa\xf6\x25\xce\xc5\x29\x2d\x24\x5b\xf1\x7d\xff\xaf\x19\x66\x92\x60\xc0\x11\x70\xc5\x91\xa5\x61\xcc\x20\x9c\x01\x8b\x39\xe0\x2a\x4c\x79\x0a\xa3\xae\x53\xf9\xff\xc6\x98\x76\xf4\xec\x38\x47\x98\x07\x2f\x11\x42\xb3\xd9\x90\x36\xe0\x3a\x00\x00\x2a\x87\x6c\x2b\xb5\xfb\xf0\xe4\xc1\x7b\x12\xce\x83\x64\x0d\x6f\xb8\x86\x29\xce\x82\x45\xc4\x61\x1f\x23\x0a\xaa\x49\x4b\x4b\x62\xf7\xe8\x7a\xff\x7a\xaf\x90\x15\x09\x95\xc3\x4e\xea\xde\xbf\x1f\x8f\xbd\xbe\x9f\x2d\xa2\x08\x12\x9c\x61\x82\x6c\x82\x69\x0f\x1a\x57\xe5\x47\xaf\x2f\x17\x96\xaa\xb6\xdc\x07\x5e\xd6\xff\x65\xff\xc4\x2f\x72\xda\x52\x7e\x91\xbe\xfc\xc1\x9d\xef\xfb\x43\xc8\x81\x32\x44\xb5\xc8\x9a\xae\xb6\xa4\x41\xd5\x96\x0a\xd2\x43\xcf\x69\x46\xff\x00\x7f\x36\x5d\xb1\xb5\x37\xe3\x99\x26\x69\x29\x17\xd2\x82\x55\x15\x19\x2b\xab\x16\x96\x21\x7f\x05\x1e\xce\x11\x3e\x62\x86\xbf\x5d\x16\x2f\x4f\x1b\xec\xda\xfc\xba\x7f\x9e\x24\x2b\xa5\xaa\x6e\xa6\x4b\x69\xac\xe8\x87\xbf\xc6\x3b\xde\x70\x1e\x21\x9b\xe2\x6a\xd8\xac\x13\xb3\xf3\xad\x9c\x1f\x3d\xe7\x3b\x00\x00\xff\xff\xac\x6d\x31\xc6\x79\x02\x00\x00")

func migrations0003CreateofferstableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0003CreateofferstableSql,
		"migrations/0003-CreateOffersTable.sql",
	)
}

func migrations0003CreateofferstableSql() (*asset, error) {
	bytes, err := migrations0003CreateofferstableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0003-CreateOffersTable.sql", size: 633, mode: os.FileMode(420), modTime: time.Unix(1487785213, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/0001-CreateGamesTable.sql": migrations0001CreategamestableSql,
	"migrations/0002-CreateOfferTemplatesTable.sql": migrations0002CreateoffertemplatestableSql,
	"migrations/0003-CreateOffersTable.sql": migrations0003CreateofferstableSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"0001-CreateGamesTable.sql": &bintree{migrations0001CreategamestableSql, map[string]*bintree{}},
		"0002-CreateOfferTemplatesTable.sql": &bintree{migrations0002CreateoffertemplatestableSql, map[string]*bintree{}},
		"0003-CreateOffersTable.sql": &bintree{migrations0003CreateofferstableSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

