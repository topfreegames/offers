// Code generated by go-bindata.
// sources:
// migrations/0001-CreateGamesTable.sql
// migrations/0002-CreateOffersTable.sql
// migrations/0003-CreateOfferIntancesTable.sql
// migrations/0004-AddFilterToOffers.sql
// migrations/0005-AddGINIndexToOffers.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations0001CreategamestableSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8d\xb1\x4e\xc3\x30\x14\x45\x77\x7f\xc5\x55\x97\x26\x12\x2c\x48\x5d\xda\x29\x85\x57\x61\x70\x6d\x94\xbc\xa8\x2d\x0b\x7a\xaa\x2d\xc8\x60\x88\x62\x87\x05\xf1\xef\x88\x06\x21\x21\x86\xce\xe7\x9c\x7b\xaf\x6b\xaa\x98\x40\x7b\x26\xdb\x68\x67\xa1\x37\xb0\x8e\x41\x7b\xdd\x70\x83\xd9\x38\x76\xfe\xf2\x2d\xa5\x7e\xb6\x52\xea\x47\xe6\x6a\x6d\x08\xcf\x12\x43\x42\xa1\x00\xa0\xf3\x78\x97\xe1\xf8\x22\x43\x71\xb5\x58\x94\x78\xa8\xf5\xb6\xaa\x0f\xb8\xa7\xc3\xc5\x49\x78\x95\x18\xfe\x2a\xdf\x27\xb6\x35\x66\xe2\x31\x64\xf1\x92\x05\x77\x8d\xb3\xeb\x5f\x88\x1b\xda\x54\xad\x61\xcc\x3f\x3e\xe7\xcb\xe5\x09\x4e\xc1\x71\x08\x92\x83\x7f\x92\x8c\xdc\xc5\x90\xb2\xc4\x1e\x3b\xcd\xb7\x60\xbd\x25\x3c\x3a\x4b\xff\x57\xac\xdb\x15\xe5\xd4\x8f\xbd\x3f\xdf\xb7\xc6\xa8\x72\xa5\xbe\x02\x00\x00\xff\xff\x4d\x6b\x40\xe9\x24\x01\x00\x00")

func migrations0001CreategamestableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0001CreategamestableSql,
		"migrations/0001-CreateGamesTable.sql",
	)
}

func migrations0001CreategamestableSql() (*asset, error) {
	bytes, err := migrations0001CreategamestableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0001-CreateGamesTable.sql", size: 292, mode: os.FileMode(420), modTime: time.Unix(1493062244, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations0002CreateofferstableSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4f\x6f\xe2\x30\x10\xc5\xef\xf9\x14\x23\x2e\x24\xd2\xee\x61\xff\xb0\x07\x38\x05\x18\xb4\xd9\x0d\x4e\x95\x18\x01\xbd\x44\x26\x1e\x52\x4b\xc4\x4e\x1d\x07\xa9\xaa\xfa\xdd\xab\x44\x69\x39\x50\x24\xce\xf3\x7b\x6f\x9e\x3d\x6f\x91\x62\xc8\x11\x70\xc7\x91\x65\x51\xc2\x20\x5a\x01\x4b\x38\xe0\x2e\xca\x78\x06\xa3\xb6\x55\xf2\xbb\x69\x9a\x7a\x34\xf3\xbc\x01\xe6\xe1\x3c\x46\x30\xc7\x23\xd9\x06\x7c\x0f\x40\x49\x28\x9e\x84\xf5\x7f\xfd\x09\xe0\x21\x8d\xd6\x61\xba\x87\xff\xb8\x87\x25\xae\xc2\x4d\xcc\xa1\x33\xc9\x4b\xd2\x64\x85\xa3\xfc\xfc\xdb\x0f\xbe\x79\x00\xa5\xa8\x28\x57\x12\xce\xc2\xf6\xea\x9f\x93\x49\xd0\xef\x66\x9b\x38\x86\x14\x57\x98\x22\x5b\x60\xd6\x83\x8d\xaf\x64\xaf\xd2\xa2\xa2\xaf\x25\xdd\xb4\x26\xab\x8c\x84\x7f\x59\xc2\xe6\x17\xaf\x8f\x1c\xe3\xd7\xb7\x31\x4c\xa7\xfd\xb4\xa3\x8f\x96\x9e\x5b\xd2\xc5\xcb\xbd\x02\x67\x55\x59\x92\xbd\x17\xaf\x4f\xa2\xa0\x8a\xb4\xbb\x1d\xb8\x22\x27\xa4\x70\x62\xb0\xbc\xe9\x64\x8d\x6c\x0b\x77\xf3\xbb\x3a\xa6\x30\xda\x91\x76\xcd\xbd\xe9\x48\x8b\xc3\x89\x24\x1c\x8c\x39\x5d\xd3\xce\xb6\xd4\x51\x67\xb2\x8d\x32\x1a\x94\x76\xd4\x3d\xfd\x0a\xfc\xd1\xef\xb6\x24\x1c\xc9\x5c\x38\x70\xaa\xa2\xc6\x89\xaa\x86\x6d\xc4\xff\x02\x8f\xd6\x08\x8f\x09\xc3\x6b\x25\x4b\xb6\x7e\xe0\x05\x97\x62\x45\x6c\x89\xbb\xa1\x58\x79\x77\x75\x48\xd8\x67\xcf\x86\xba\x04\x33\xef\x3d\x00\x00\xff\xff\xec\xf7\x0c\xb7\xb4\x02\x00\x00")

func migrations0002CreateofferstableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0002CreateofferstableSql,
		"migrations/0002-CreateOffersTable.sql",
	)
}

func migrations0002CreateofferstableSql() (*asset, error) {
	bytes, err := migrations0002CreateofferstableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0002-CreateOffersTable.sql", size: 692, mode: os.FileMode(420), modTime: time.Unix(1494438399, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations0003CreateofferintancestableSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x41\x6f\xe2\x30\x14\x84\xef\xf9\x15\x4f\x5c\x48\xa4\xac\xc4\xee\x96\x1e\xe8\x29\xc0\x43\x75\x1b\x9c\x36\x71\x04\xf4\x62\x59\x89\xa1\x96\x8a\x83\x6c\x83\x54\x55\xfd\xef\x15\x21\x10\x28\xed\xd9\xf3\x8d\x67\xe6\x8d\x52\x8c\x18\x02\xce\x19\xd2\x8c\x24\x14\xc8\x04\x68\xc2\x00\xe7\x24\x63\x19\x74\xb6\x5b\x55\xfe\xa9\xac\xdd\x74\xee\x3c\xaf\x11\xb3\x68\x18\x23\x54\xcb\xa5\x34\x5c\x69\xeb\x84\x2e\xa4\x05\xdf\x03\x00\x50\x25\x14\xaf\xc2\xf8\xff\x6f\x03\x78\x4a\xc9\x34\x4a\x17\xf0\x88\x0b\x18\xe3\x24\xca\x63\x06\x7b\x3f\xbe\x92\x5a\x1a\xe1\x24\xdf\xdd\xf8\x41\x58\x73\x2b\xb1\x96\x5c\x95\xb0\x13\xa6\xe6\xff\xf5\xfb\x41\x1d\x84\xe6\x71\x0c\x29\x4e\x30\x45\x3a\xc2\xac\x16\x5a\x5f\x95\x0d\xb7\x79\x13\xef\xfb\x18\x2d\xf9\xb7\xd7\xeb\xb5\xe8\x41\xd5\x64\x3d\xcb\xf6\x93\x75\xad\x3a\xf3\x3e\x50\x3b\x69\xac\xaa\x34\x28\xed\xe4\x4a\x9a\x6f\xce\x45\xa5\x9d\xd4\xce\xc2\x43\x96\xd0\x61\x6b\x7b\xec\xdb\xfd\xf8\xec\xc2\x60\x50\xbf\x36\x89\x4d\x55\x6e\x0b\xf7\x6b\xd9\xc6\xd7\x48\xe1\x64\xc9\x85\x03\xa7\xd6\xd2\x3a\xb1\xde\xc0\x8c\xb0\x7b\x60\x64\x8a\xf0\x92\x50\xbc\xfe\x8c\x26\x33\x3f\xf0\x82\xf6\x52\x39\x25\xcf\x39\x02\xa1\x63\x9c\x1f\x27\xe6\xa7\xc9\xf8\x71\x16\x7e\xd1\xd4\x4b\xe8\xf5\x71\x1b\x38\x6c\x07\x0f\x4f\xab\x86\x97\x4b\x05\xde\x57\x00\x00\x00\xff\xff\x1c\xf2\x95\xcf\x55\x02\x00\x00")

func migrations0003CreateofferintancestableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0003CreateofferintancestableSql,
		"migrations/0003-CreateOfferIntancesTable.sql",
	)
}

func migrations0003CreateofferintancestableSql() (*asset, error) {
	bytes, err := migrations0003CreateofferintancestableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0003-CreateOfferIntancesTable.sql", size: 597, mode: os.FileMode(420), modTime: time.Unix(1493062244, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations0004AddfiltertooffersSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\x4f\x4b\x4b\x2d\x2a\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x48\xcb\xcc\x29\x01\x09\x79\x05\xfb\xfb\x39\x29\xf8\xf9\x87\x28\xf8\x85\xfa\xf8\x28\xb8\xb8\xba\x39\x86\xfa\x84\x28\xa8\x57\xd7\xaa\x2b\x58\x59\x81\x65\xad\xb9\x00\x01\x00\x00\xff\xff\x50\xa0\xe5\xaa\x4b\x00\x00\x00")

func migrations0004AddfiltertooffersSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0004AddfiltertooffersSql,
		"migrations/0004-AddFilterToOffers.sql",
	)
}

func migrations0004AddfiltertooffersSql() (*asset, error) {
	bytes, err := migrations0004AddfiltertooffersSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0004-AddFilterToOffers.sql", size: 75, mode: os.FileMode(420), modTime: time.Unix(1493320856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations0005AddginindextooffersSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\xf0\xf4\x73\x71\x8d\x50\xc8\x4c\xa9\x48\xcf\xcc\x53\xf0\xf7\x53\xc8\x4f\x4b\x4b\x2d\x2a\x56\x08\x0d\xf6\xf4\x73\x57\x70\xf7\xf4\x53\xd0\x48\xcb\xcc\x29\x49\x2d\x2a\xd6\xb4\xe6\x02\x04\x00\x00\xff\xff\xe5\xe8\x31\x68\x33\x00\x00\x00")

func migrations0005AddginindextooffersSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0005AddginindextooffersSql,
		"migrations/0005-AddGINIndexToOffers.sql",
	)
}

func migrations0005AddginindextooffersSql() (*asset, error) {
	bytes, err := migrations0005AddginindextooffersSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0005-AddGINIndexToOffers.sql", size: 51, mode: os.FileMode(420), modTime: time.Unix(1494437198, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/0001-CreateGamesTable.sql": migrations0001CreategamestableSql,
	"migrations/0002-CreateOffersTable.sql": migrations0002CreateofferstableSql,
	"migrations/0003-CreateOfferIntancesTable.sql": migrations0003CreateofferintancestableSql,
	"migrations/0004-AddFilterToOffers.sql": migrations0004AddfiltertooffersSql,
	"migrations/0005-AddGINIndexToOffers.sql": migrations0005AddginindextooffersSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"0001-CreateGamesTable.sql": &bintree{migrations0001CreategamestableSql, map[string]*bintree{}},
		"0002-CreateOffersTable.sql": &bintree{migrations0002CreateofferstableSql, map[string]*bintree{}},
		"0003-CreateOfferIntancesTable.sql": &bintree{migrations0003CreateofferintancestableSql, map[string]*bintree{}},
		"0004-AddFilterToOffers.sql": &bintree{migrations0004AddfiltertooffersSql, map[string]*bintree{}},
		"0005-AddGINIndexToOffers.sql": &bintree{migrations0005AddginindextooffersSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

