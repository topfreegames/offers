// Code generated by go-bindata.
// sources:
// migrations/0001-CreateGamesTable.sql
// migrations/0002-CreateOfferTemplatesTable.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations0001CreategamestableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8d\x41\x4b\xc3\x30\x18\x86\xef\xf9\x15\x2f\xbb\xac\x05\xbd\x08\xbb\x6c\xa7\x4e\xbf\x41\xb5\xa6\xd2\x64\xb8\x9d\xc6\xb7\x25\xcc\x80\xa9\xa5\x49\xbc\x88\xff\x5d\x6c\x55\xa8\x3b\x3f\xcf\xf3\xbe\xb7\x0d\x15\x9a\x40\x3b\x4d\x52\x95\xb5\x44\xb9\x81\xac\x35\x68\x57\x2a\xad\x30\x4b\xc9\x99\xeb\xb7\x10\xba\xd9\x4a\x88\x1f\x59\x17\xeb\x8a\x70\x66\x6f\x03\x32\x01\x00\xce\xe0\x9d\xfb\xd3\x0b\xf7\xd9\xcd\x62\x91\xe3\xa9\x29\x1f\x8b\x66\x8f\x07\xda\x5f\x0d\x42\xcb\xde\x4e\x95\xef\x13\xb9\xad\xaa\x91\x7b\x1b\xd9\x70\x64\xdc\xab\x5a\xae\xff\x20\xee\x68\x53\x6c\x2b\x8d\xf9\xc7\xe7\x7c\xb9\x1c\xe0\x18\x1c\x53\x6b\x5e\xed\xe1\xff\xf1\x74\xf5\xd4\x5b\x8e\xd6\x1c\x38\x22\x3a\x6f\x43\x64\xdf\x5d\x6e\xcb\xfa\x39\xcb\xc7\x20\x75\xe6\x37\x38\xba\xb3\x6b\xe3\x60\x8a\x7c\x25\xbe\x02\x00\x00\xff\xff\x00\xc5\xb2\xa5\x28\x01\x00\x00")

func migrations0001CreategamestableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0001CreategamestableSql,
		"migrations/0001-CreateGamesTable.sql",
	)
}

func migrations0001CreategamestableSql() (*asset, error) {
	bytes, err := migrations0001CreategamestableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0001-CreateGamesTable.sql", size: 296, mode: os.FileMode(420), modTime: time.Unix(1487271432, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations0002CreateoffertemplatestableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\xcd\xcd\x4a\xc3\x40\x14\xc5\xf1\xfd\x3c\xc5\xa1\x9b\x36\xa0\x1b\xa5\x2e\xda\x55\xaa\xb7\x10\x8d\x13\x49\xa6\xd0\xae\xe4\x92\xb9\x89\x03\xe6\xc3\xc9\x44\x10\xf1\xdd\xa5\x41\xdc\x29\x59\xff\xfe\x87\x73\x9b\x53\x6c\x08\x74\x34\xa4\x8b\x24\xd3\x48\xf6\xd0\x99\x01\x1d\x93\xc2\x14\x58\x8c\xa3\xb3\x97\xdd\x30\xf4\x8b\xad\x52\x3f\xb1\x89\x77\x29\xa1\xab\x2a\xf1\xcf\x41\x9a\xfe\x95\x83\x0c\x58\x29\xc0\x59\x94\x2f\xec\x57\xd7\x37\x11\x9e\xf2\xe4\x31\xce\x4f\x78\xa0\xd3\x85\x02\x5a\x6e\x04\xef\xec\x27\xbf\x5a\xaf\xa3\xe9\x46\x1f\xd2\xf4\xac\xbd\xb3\x7f\x63\xcd\x8d\xfc\xe7\x65\xd7\x06\x69\xc3\x80\xfb\x22\xd3\xbb\x5f\xc2\x1d\xed\xe3\x43\x6a\xb0\xfc\xfc\x5a\x62\xb3\x99\xf4\xdc\x37\x12\xd8\x72\xe0\xb9\x7d\x2f\xde\x75\x76\x6e\x5d\x79\x79\x1b\xa5\x2d\x3f\xe6\x0e\x82\x77\x75\x2d\x7e\x4e\xae\xa2\xad\xfa\x0e\x00\x00\xff\xff\xa7\x5d\x91\xe3\xb2\x01\x00\x00")

func migrations0002CreateoffertemplatestableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0002CreateoffertemplatestableSql,
		"migrations/0002-CreateOfferTemplatesTable.sql",
	)
}

func migrations0002CreateoffertemplatestableSql() (*asset, error) {
	bytes, err := migrations0002CreateoffertemplatestableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0002-CreateOfferTemplatesTable.sql", size: 434, mode: os.FileMode(420), modTime: time.Unix(1487283068, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/0001-CreateGamesTable.sql": migrations0001CreategamestableSql,
	"migrations/0002-CreateOfferTemplatesTable.sql": migrations0002CreateoffertemplatestableSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"0001-CreateGamesTable.sql": &bintree{migrations0001CreategamestableSql, map[string]*bintree{}},
		"0002-CreateOfferTemplatesTable.sql": &bintree{migrations0002CreateoffertemplatestableSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

